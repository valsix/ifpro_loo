drop table if exists tr_loo;
create table tr_loo
(
	tr_loo_id numeric not null
	, status_data character varying
	, nomor_surat character varying
	, info_nomor_surat character varying
	, user_pembuat_id character varying
	, user_pengirim_id character varying
	, user_pengirim_nama character varying
	, user_pengirim_jabatan character varying
	, satuan_kerja_pengirim_id character varying
	, user_posisi_paraf_id character varying
	, user_lihat_status character varying
	, produk_id integer
	, customer_id integer
	, lokasi_loo_id integer
	, pph numeric
	, total_luas_indoor numeric
	, total_luas_outdoor numeric
	, total_luas numeric
	, total_diskon_indoor_sewa numeric
	, total_diskon_outdoor_sewa numeric
	, total_diskon_indoor_service numeric
	, total_diskon_outdoor_service numeric
	, harga_indoor_sewa numeric
	, harga_outdoor_sewa numeric
	, harga_indoor_service numeric
	, harga_outdoor_service numeric
	, dp numeric
	, periode_sewa numeric
	, approval_qr_date timestamp without time zone
	, ttd_kode character varying
	, persetujuan_info character varying
	, jumlah_step numeric
	, last_user character varying
	, paksa_db character varying
	, constraint pk_tr_loo primary key (tr_loo_id)
);

create or replace function p_tr_loo()
  returns trigger as
$body$
declare

pejabatnip character varying;
pejabatnama character varying;
pejabatjabatan character varying;
statuspejabatganti character varying;
ispemaraf integer := 0;
persetujuaninfo character varying;
jumlahstep numeric := 0;
infonomorsurat character varying;
userlihatstatus character varying;
vquery text;

begin

	if lower(new.paksa_db) = lower('paksa') then
		new.paksa_db:= null;
		return new;
	end if;

	if lower(new.paksa_db) = lower('tnomor') then
		new.paksa_db:= null;
		infonomorsurat:= '/' || upper('ifpro') || '-' || upper('comm') || '/' || upper('loo') || '/' || (select upper(kode) from lokasi_loo where lokasi_loo_id = new.lokasi_loo_id) || '/' || (select ambil_bulan_romawi(to_char(now(), 'mm'))) || '/' || (select to_char(now(), 'yyyy'));
		--raise notice '%', infonomorsurat;

		new.info_nomor_surat:= infonomorsurat;
		return new;
	end if;

	if lower(new.paksa_db) = lower('updateparaf') then

		select
		info_loo_paraf(new.tr_loo_id) persetujuan_info, coalesce(a1.jumlah_step,0) jumlah_step
		into persetujuaninfo, jumlahstep
		from tr_loo a
		left join
		(
			select
			tr_loo_id, count(1) jumlah_step
			from tr_loo_paraf
			where status_paraf is null
			group by tr_loo_id
		) a1 on a.tr_loo_id = a1.tr_loo_id
		where a.tr_loo_id = new.tr_loo_id;

		new.persetujuan_info:= persetujuaninfo;
		new.jumlah_step:= jumlahstep;

		new.paksa_db:= null;
		return new;
	end if;

	if lower(new.paksa_db) = lower('updateuserlihatstatus') then
		select string_agg(a.user_id, ',') into userlihatstatus
		from
		(
			select distinct a.user_id
			from
			(
				select a.user_id
				from tr_loo_paraf a
				inner join tr_loo a1 on a.tr_loo_id = a1.tr_loo_id
				where 1=1 and a.tr_loo_id = new.tr_loo_id
				union all
				select a.user_pembuat_id  user_id
				from tr_loo a
				where 1=1 and a.tr_loo_id = new.tr_loo_id
				union all
				select a.user_pengirim_id user_id
				from tr_loo a
				where 1=1 and a.tr_loo_id = new.tr_loo_id
			) a
		) a;

		new.user_lihat_status:= userlihatstatus;
		new.paksa_db:= null;
		return new;
	end if;

	select
	nip, nama_pegawai, jabatan, status_pejabat_ganti
	into pejabatnip, pejabatnama, pejabatjabatan, statuspejabatganti
	from satuan_kerja_fix where satuan_kerja_id = new.satuan_kerja_pengirim_id;

	new.user_pengirim_id:= pejabatnip;
	new.user_pengirim_nama:= pejabatnama;
	new.user_pengirim_jabatan:= pejabatjabatan;

	if new.status_data = upper('draft') then
		return new;
	elsif new.status_data = upper('revisi') then
		return new;
	else
		--kalau simpan data, tidak sesuai pejabat pengirim
		if new.last_user = pejabatnip then
			--raise notice '%', ispemaraf;
		else
			select count(1) into ispemaraf 
			from tr_loo_paraf a
			where 1=1 and tr_loo_id = new.tr_loo_id 
			and coalesce(nullif(status_paraf, 'x'), 'x') = 'x';

			if adaparaf > 0 then
				new.status_data := upper('paraf');
			end if;
		end if;
	end if;

	return new;

end;
$body$
language plpgsql volatile cost 100;
alter function p_tr_loo() owner to postgres;

drop trigger if exists trg_tr_loo on tr_loo;
create trigger trg_tr_loo
before insert or update
on tr_loo
for each row
execute procedure p_tr_loo();

create or replace function tr_loo_p_hapus()
  returns trigger as
$body$
declare
    var_id integer;
    varcheck integer;
begin
	if tg_op = upper('delete') then
		delete from tr_loo_detil where tr_loo_id = old.tr_loo_id;
		delete from tr_loo_paraf where tr_loo_id = old.tr_loo_id;
		delete from tr_loo_log where tr_loo_id = old.tr_loo_id;
		delete from tr_loo_attachment where tr_loo_id = old.tr_loo_id;
		return old;
	end if;
   
end;
$body$
language plpgsql volatile cost 100;
alter function tr_loo_p_hapus() owner to postgres;

drop trigger if exists tr_loo_t_hapus on tr_loo;
create trigger tr_loo_t_hapus
before delete
on tr_loo
for each row
execute procedure tr_loo_p_hapus();

create or replace function info_loo_paraf(vid numeric)
  returns character varying as
$body$
declare
inforeturn character varying;
infodata character varying;

rec_data record;
x numeric := 1;
totalparafstatus integer;
totalparaf integer;

begin
    select count(1) into totalparafstatus from tr_loo_paraf where tr_loo_id = vid and status_paraf = '1';
    select count(1) into totalparaf from tr_loo_paraf where tr_loo_id = vid;
    
    inforeturn:='';
    for rec_data in (
		select
		urutdata, tr_loo_id, status_data, nama_satker, no_urut, next_urut, status_paraf, terbaca
		from
		(
			select
			1 urutdata, tr_loo_id, status_data, nama_satker, no_urut, coalesce(next_urut,1) next_urut, status_paraf, terbaca
			from tr_loo_paraf a
			inner join (select tr_loo_id sm_id, status_data from tr_loo) b on tr_loo_id = sm_id
			where tr_loo_id = vid
			union all
			select
			2 urutdata, a.tr_loo_id, a.status_data
			--, case when a.status_pejabat_ganti = '1' then sf.jabatan else b.jabatan end nama_satker
			, b.jabatan nama_satker
			, coalesce(sp.no_urut,0) + 1 no_urut
			, coalesce(sp.next_urut,1) next_urut
			, case when a.status_data = upper('posting') then '1' else null end status_paraf
			--, case when a.terbaca_validasi = 0 then null else a.terbaca_validasi end 
			, 0 terbaca
			from tr_loo a
			inner join pegawai b on a.user_pengirim_id = b.pegawai_id
			inner join satuan_kerja_fix sf on a.satuan_kerja_pengirim_id = sf.satuan_kerja_id
			left join
			(
				select tr_loo_id, max(no_urut) no_urut, coalesce(next_urut,1) next_urut
				from tr_loo_paraf
				where no_urut <= coalesce(next_urut,1)
				and coalesce(nullif(kondisi_paraf, ''), null) is null
				group by tr_loo_id, coalesce(next_urut,1)
			) sp on a.tr_loo_id = sp.tr_loo_id
			where a.tr_loo_id = vid
			/*union all
			select
			3 urutdata, a.tr_loo_id, a.status_data
			--, case when a.status_pejabat_ganti = '1' then sf.jabatan else b.jabatan end nama_satker
			, b.jabatan nama_satker
			, coalesce(sp.no_urut,0) + 1, coalesce(sp.next_urut,1) next_urut
			, case when a.status_data = upper('posting') then '1' else null end status_paraf
			, null terbaca
			from tr_loo a
			inner join pegawai b on a.user_id = b.pegawai_id
			inner join satuan_kerja_fix sf on a.satuan_kerja_id_asal = sf.satuan_kerja_id
			left join
			(
				select tr_loo_id, max(no_urut) no_urut, coalesce(next_urut,1) next_urut
				from tr_loo_paraf
				where no_urut <= coalesce(next_urut,1)
				and coalesce(nullif(kondisi_paraf, ''), null) is null
				group by tr_loo_id, coalesce(next_urut,1)
			) sp on a.tr_loo_id = sp.tr_loo_id
			where a.jenis_naskah_id in (8,17,18,19,20) and a.tr_loo_id = vid*/
		) a
		order by a.tr_loo_id, a.urutdata, a.no_urut, a.next_urut
    )
    loop

	infodata:= '';

	if rec_data.urutdata = 3 then
		infodata:= rec_data.nama_satker;
	else
		if rec_data.terbaca is not null then infodata:= rec_data.nama_satker || ' <i class="fa fa-md fa-eye"></i>';
		else infodata:= rec_data.nama_satker || ' <i class="fa fa-md fa-eye-slash"></i>';
		end if;
	end if;
	
	--select info_loo_paraf(183)
	--raise notice '-,%', rec_data.nama_satker;
	--raise notice '-,%', rec_data.no_urut || '-' || rec_data.next_urut || '-' || totalparafstatus || '-' || totalparaf;
			
	if (rec_data.no_urut = rec_data.next_urut) or (rec_data.urutdata = 2 and rec_data.status_data = upper('validasi'))
	then 
		if rec_data.urutdata = 3 then
			if rec_data.status_data = upper('pembuat') then
				infodata:= '<b>' || infodata || '</b> <i class="fa fa-md fa-pencil-square-o"></i>';
			else
				infodata:= infodata;
			end if;
		--elsif rec_data.urutdata = 2 and rec_data.status_data = upper('pembuat') then
		--	infodata:= infodata;
		else
			if rec_data.status_paraf is not null then infodata:= '<b>' || infodata || '</b> <i class="fa fa-md fa-check-square-o"></i>';--fa-check fa-md
			else infodata:= '<b>' || infodata || '</b> <i class="fa fa-md fa-pencil-square-o"></i>';--fa-close fa-md
			--if rec_data.status_paraf is not null then infodata:= '#bawal#' || infodata || '#bakhir# <i class="fa fa-md fa-check-square-o"></i>';--fa-check fa-md
			--else infodata:= '#bawal#' || infodata || '#bakhir# <i class="fa fa-md fa-pencil-square-o"></i>';--fa-close fa-md
			end if;
		end if;
	else
		infodata:= infodata;
	end if;
	
	if x = 1 then
		inforeturn := infodata;
	else
		inforeturn := inforeturn || '<br/>' || infodata;
	end if;
	x := x + 1;
    end loop;
   return inforeturn;
end;
$body$
language plpgsql volatile cost 100;
alter function info_loo_paraf(numeric) owner to postgres;

drop table if exists tr_loo_detil;
create table tr_loo_detil
(
	tr_loo_detil_id numeric not null
	, tr_loo_id numeric not null
	, vmode character varying
	, vid numeric
	, nilai numeric
	, keterangan character varying
	, constraint pk_tr_loo_detil primary key (tr_loo_detil_id)
);

drop table if exists tr_loo_log;
create table tr_loo_log
(
	tr_loo_log_id numeric not null
	, tr_loo_id numeric
	, tanggal timestamp without time zone
	, status_surat character varying
	, informasi character varying
	, catatan text
	, last_create_user character varying
	, last_create_date date
	, last_update_user character varying
	, last_update_date date
	, constraint pk_tr_loo_log primary key (tr_loo_log_id)
);

drop table if exists tr_loo_attachment;
create table tr_loo_attachment
(
	tr_loo_attachment_id numeric not null
	, tr_loo_id numeric
	, attachment text
	, catatan character varying
	, ukuran numeric
	, tipe character varying(50)
	, nama character varying
	, no_urut numeric
	, last_create_user character varying
	, last_create_date timestamp without time zone
	, last_update_user character varying
	, last_update_date timestamp without time zone
	, constraint pk_tr_loo_attachment primary key (tr_loo_attachment_id)
);

drop table if exists tr_loo_paraf;
create table tr_loo_paraf
(
	tr_loo_paraf_id numeric not null
	, tr_loo_id numeric
	, satuan_kerja_id_tujuan character varying
	, user_id character varying
	, nama_user character varying
	, nama_satker character varying
	, status_paraf character varying
	, kode_paraf character varying
	, terbaca numeric
	, no_urut integer
	, next_urut integer
	, status_bantu integer
	, status_pejabat_ganti character varying
	, nip_mutasi character varying
	, kondisi_paraf character varying
	, last_create_user character varying
	, last_create_date date
	, last_update_user character varying
	, last_update_date date
	, constraint pk_tr_loo_paraf primary key (tr_loo_paraf_id)
	, constraint u_loo_paraf unique (tr_loo_id, user_id)
);

create or replace function p_tr_loo_paraf()
  returns trigger as
$body$

declare 
psatkernip character varying;
psatkernama character varying;
psatkerpegawai character varying;
statuspejabatganti character varying;
kelompokjabatan character varying;
ceknexturut integer;
posisinexturut integer;
totalparafstatus integer;
totalparaf integer;
batasawal integer;
batasakhir integer;
cekdatanexturut integer;

    begin

	if new.status_bantu = 1 then
		select
			user_bantu, 'Sekretaris ' || nama, user_bantu_nama, status_pejabat_ganti, kelompok_jabatan
			into psatkernip, psatkernama, psatkerpegawai, statuspejabatganti, kelompokjabatan
		from satuan_kerja_fix 
		where satuan_kerja_id = new.satuan_kerja_id_tujuan;
	else
		select
			nip, jabatan, nama_pegawai, status_pejabat_ganti, kelompok_jabatan
			into psatkernip, psatkernama, psatkerpegawai, statuspejabatganti, kelompokjabatan
		from satuan_kerja_fix 
		where satuan_kerja_id = new.satuan_kerja_id_tujuan;
	end if;

	if lower(tg_op) = lower('update') and coalesce(nullif(old.status_paraf, ''), null) is null and coalesce(nullif(new.status_paraf, ''), null) is not null 
	then
		select count(1) into totalparafstatus from tr_loo_paraf where tr_loo_id = new.tr_loo_id
		and status_paraf = '1';
		
		select max(next_urut) posisinexturut into posisinexturut
		from tr_loo_paraf where tr_loo_id = new.tr_loo_id;
		
		posisinexturut:= coalesce(posisinexturut,0) + 1;

		if totalparafstatus > 0 then
			if new.kondisi_paraf != 'paralel' then
				--raise notice '-,%', 'x';
				return new;
			end if;
		else
			--kalau next urut lanjut tidak sama maka tidak update karena bukan saatnya
			if posisinexturut != new.no_urut or old.next_urut is null then
				if posisinexturut = new.no_urut then
					--raise notice '-,%', 'a';
					return new;
				else
					--raise notice '-,%', 'b';
					return old;
				end if;
			end if;
		end if;
	end if;

	if lower(tg_op) = lower('insert') then
		select coalesce(max(no_urut),0) + 1 into ceknexturut
		from tr_loo_paraf where tr_loo_id = new.tr_loo_id;
		new.no_urut= ceknexturut;
	end if;
	
	new.user_id := psatkernip;
	new.status_pejabat_ganti:= statuspejabatganti;
	new.nama_user := psatkerpegawai;
	new.nama_satker := psatkernama;
    return new;
    end;
$body$
language plpgsql volatile cost 100;
alter function p_tr_loo_paraf() owner to postgres;

drop trigger if exists trg_tr_loo_paraf on tr_loo_paraf;
create trigger trg_tr_loo_paraf
before insert or update
on tr_loo_paraf
for each row
execute procedure p_tr_loo_paraf();

drop table if exists utility_charge;
create table utility_charge
(
	utility_charge_id numeric not null
	, nama character varying
	, keterangan character varying
	, constraint pk_utility_charge primary key (utility_charge_id)
);

insert into utility_charge(utility_charge_id, nama, keterangan) values (1, 'Listrik', 'kwh');
insert into utility_charge(utility_charge_id, nama, keterangan) values (2, 'Gas', 'kg');
insert into utility_charge(utility_charge_id, nama, keterangan) values (3, 'Air', 'm3');